#!/usr/bin/env sh

# Makes sure the ssh directory exists
ssh_dir () {
  if [ ! -d "$HOME/.ssh" ]; then
    mkdir "$HOME/.ssh" || return 1
  fi
}

# Creates new ssh keys with the provided password
# Passing no parameter prompts the user for a password
ssh_genkey () {
  local PASS; local PASS2
  if [ "$#" -eq "0" ]; then
    stty -echo
    echo -n "Password: "
    read PASS
    echo ""
    echo -n "Confirm: "
    read PASS2
    echo ""
    stty echo
    [ "$PASS" != "$PASS2" ] && { echo "Passwords do not match" >&2; return 1; }
  elif [ "$#" -eq "1" ]; then
    PASS="$1"
  else
    return 1
  fi

  ssh_dir || return 1
  rm -f "$HOME/.ssh/"id_* 2>/dev/null
  touch "$HOME/.ssh/"id_{rsa,ecdsa}
  chmod 0600 "$HOME/.ssh/"id_{rsa,ecdsa}

  if [ "$PASS" = "" ]; then
    openssl genrsa -out "$HOME/.ssh/id_rsa" 4096
	echo $(ssh-keygen -yf "$HOME/.ssh/id_rsa") $(hostname) > "$HOME/.ssh/id_rsa.pub"
	openssl ecparam -genkey -name secp521r1 -out "$HOME/.ssh/id_ecdsa"
	echo $(ssh-keygen -yf "$HOME/.ssh/id_ecdsa") $(hostname) > "$HOME/.ssh/id_ecdsa.pub"
  else
	openssl genrsa -aes256 -passout "pass:$PASS" -out "$HOME/.ssh/id_rsa" 4096
	echo $(ssh-keygen -P "$PASS" -yf "$HOME/.ssh/id_rsa") $(hostname) > "$HOME/.ssh/id_rsa.pub"
	openssl ecparam -genkey -name secp521r1 | openssl ec -aes256 -passout "pass:$PASS" -out "$HOME/.ssh/id_ecdsa"
	echo $(ssh-keygen -P "$PASS" -yf "$HOME/.ssh/id_ecdsa") $(hostname) > "$HOME/.ssh/id_ecdsa.pub"
  fi
}

# Create the keys from the git repo
ssh_defkey () {
  ssh_dir || return 1
  local CPFX; local LPFX; local KEYS
  CPFX="$(dir_conf)/conf/ssh/default_"
  LPFX="$HOME/.ssh/id_"
  
  array_from_str KEYS "rsa rsa.pub ecdsa ecdsa.pub"
  array_forall KEYS ssh_defkey_one
}
ssh_defkey_one () {
  if [ -f "$CPFX$1" ]; then
    symlink "$CPFX$1" "$LPFX$1" || return 1
  fi
}

# Populates the authorized_keys file
ssh_auth () {
  ssh_dir || return 1
  rm -f "$HOME/.ssh/authorized_keys"
  local KEYS
  array_from_str KEYS "$(find $(dir_conf)/conf/ssh -type f | grep -v 'config$' | grep '.pub$')"
  array_forall KEYS ssh_auth_one
}
ssh_auth_one () {
  cat "$1" >> "$HOME/.ssh/authorized_keys"
}

# Makes sure the client configuration is installed
ssh_client () {
  ssh_dir || return 1
  symlink "$(dir_conf)/conf/ssh/config" "$HOME/.ssh/config"
  ssh-keygen -H >/dev/null 2>&1
  rm -f "$HOME/.ssh/known_hosts.old"
}

# Automatically determine how to configure ssh
ssh_auto () {
  config_ln "gnupg"
  ssh_client || { echo "Failed to create client configuration" >&2; return 1; }
  ssh_auth || { echo "Failed to update authorized_keys" >&2; return 1; }
  if [ ! -f "$HOME/.ssh/id_rsa.pub" ] && [ ! -f "$HOME/.ssh/id_ecdsa.pub" ]; then
    if info_ws; then
      ssh_defkey || { echo "Failed to populate client keys" >&2; return 1; }
    else
      ssh_genkey "" || { echo "Failed to generate client keys" >&2; return 1; }
    fi
  fi
}
