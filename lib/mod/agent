#!/usr/bin/env sh

# Exports extra params
agent_export () {
  export SSH_AUTH_SOCK
  export GPG_AGENT_INFO
  export GNOME_KEYRING_CONTROL
  export GNOME_KEYRING_PID
}

# Retrieve the agent environment
agent_file () {
  echo "$(dir_tmp)/agent-environment"
}

# Print cmd if agent exists
agent_cmd () {
  [ "$#" -lt "1" ] && return 1
  path_hasbin $1 && echo "$@;"
}

# Find the path to the pcsc driver
agent_find_pcsc () {
  [ -x "/lib/libpcsclite.so" ] && p_and_q 0 "/lib/libpcsclite.so"
  [ -x "/usr/lib/libpcsclite.so" ] && p_and_q 0 "/usr/lib/libpcsclite.so"
  [ -x "/run/current-system/sw/lib/libpcsclite.so" ] && p_and_q 0 "/run/current-system/sw/lib/libpcsclite.so"
  [ -x "$HOME/.nix-profile/lib/libpcsclite.so" ] && p_and_q 0 "$HOME/.nix-profile/lib/libpcsclite.so"
  exit 1
}

# Determine which agent to use
agent_which () {
  [ "$(hostname -s )" = "fantom" ] && agent_cmd ssh-agent && return 0
  agent_cmd gnome-keyring-daemon -c pkcs11,secrets
  (info_ws && ! info_root) && {
    mkdir -p "$HOME/.gnupg"
    echo "pcsc-driver $(agent_find_pcsc)" > "$HOME/.gnupg/scdaemon.conf"
    echo "card-timeout 5" >> "$HOME/.gnupg/scdaemon.conf"
    echo "disable-ccid" >> "$HOME/.gnupg/scdaemon.conf"
    agent_cmd gpg-agent --daemon --enable-ssh-support && return 0
  }
  agent_cmd ssh-agent && return 0
  echo "Failed to find an agent" >&2
  return 1
}

# Tests to see if the agent is already running
agent_running () {
  run_quiet ssh-add -L
  [ "$?" -ne "2" ]
}

# Make sure that the running agent is the proper one
agent_proper () {
  agent_running && {
    local OLD="$(ps --pid=$SSH_AGENT_PID -o comm | tail -n 1)"
    local NEW="$(echo "$AGENT" | awk '{print $1}')"
    [ "$OLD" != "$NEW" ] && {
      echo "Killing $OLD for $NEW"
      kill $SSH_AGENT_PID
      unset SSH_AGENT_PID
    }
  }
}

# Import already running agent data
agent_env () {
  [ -f "$(agent_file)" ] && . "$(agent_file)"
  agent_export
  agent_running
}

# Spawn agent if it doesn't exist
agent_spawn () {
  echo "Spawning $@"
  (eval "$@") | grep -v echo > "$(agent_file)"
  agent_env
  ssh-add
}

# Automatically determines which agent to use and starts it if necessary
agent_auto () {
  local AGENT=$(agent_which)
  agent_proper
  agent_running || agent_env
  agent_proper
  ! agent_running && agent_spawn $AGENT && return 0
  return 1
}
