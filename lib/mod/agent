#!/usr/bin/env sh

# Exports extra params
agent_export () {
  export SSH_AUTH_SOCK
  export GPG_AGENT_INFO
  export GNOME_KEYRING_CONTROL
  export GNOME_KEYRING_PID
}

# Retrieve the agent environment
agent_file () {
  echo "$HOME/.agent-environment"
}

# Retrieve the file where the agent command is written
agent_cmd_file() {
  echo "$HOME/.agent-cmd"
}

# Print cmd if agent exists
agent_cmd () {
  [ "$#" -lt "1" ] && return 1
  path_hasbin $1 && echo "$@ ;"
}

agent_pin_program_check () {
  local PIN="$(path_bin "$1")"
  $PIN </dev/null >/dev/null 2>&1 || return 1
  echo $PIN
}

# Find the path to the pinentry application
agent_pin_program () {
  agent_pin_program_check pinentry && return 0
  agent_pin_program_check pinentry-curses && return 0
  return 1
}

# Prints the command for running the gpg-agent
agent_gpg () {
  mkdir -p "$HOME/.gnupg"
  chmod 0700 "$HOME/.gnupg"
  rm -f "$HOME/.gnupg/scdaemon.conf"
  echo "card-timeout 5" >> "$HOME/.gnupg/scdaemon.conf"
  echo "disable-ccid" >> "$HOME/.gnupg/scdaemon.conf"
  local PIN_PROG;
  PIN_PROG="$(agent_pin_program)"
  if [ "$?" -ne "0" ]; then
    echo "Couldn't select gpg-agent: no pinentry program" >&2
  else
    agent_cmd gpg-agent --pinentry-program "\"$PIN_PROG\"" --daemon --enable-ssh-support && return 0
  fi
  return 1
}

# Prints the command for running the ssh-agent
agent_ssh () {
  agent_cmd ssh-agent
}

# Determine which agent to use
agent_which () {
  [ "$1" = "ssh" ] && agent_ssh && return 0
  [ "$1" = "gpg" ] && agent_gpg && return 0
  (info_ws && ! info_root) && agent_gpg && return 0
  agent_ssh && return 0
  echo "Failed to find an agent" >&2
  return 1
}

# Tests to see if the agent is already running
agent_running () {
  test -S "$SSH_AUTH_SOCK"
}

# Make sure that the running agent is the proper one
agent_proper () {
  local OLD
  OLD="$(cat "$(agent_cmd_file)" 2>/dev/null | awk '{print $1}' | xargs basename 2>/dev/null)"
  if agent_running; then
    local NEW
    NEW="$(echo "$AGENT_CMD" | awk '{print $1}' | xargs basename)"
    if [ "$OLD" = "$NEW" ]; then
      return 0
    fi
  fi

  local OLDREG=""
  if [ -n "$OLD" ]; then
    OLDREG="|$OLD"
  fi
  pkill -u $(id -u) "^(.*/|)((ssh|gpg)-agent$OLDREG)$"
  unset SSH_AGENT_PID
  unset SSH_AUTH_SOCK
  return 1
}

# Import already running agent data
agent_env () {
  if [ -f "$(agent_file)" ]; then
    source "$(agent_file)"
  fi
  if [ -n "$AGENT_EXTRA_ENV" ]; then
    eval $AGENT_EXTRA_ENV
  fi
  agent_export
}

# Spawn agent if it doesn't exist
agent_spawn () {
  echo "Spawning $AGENT_CMD"
  echo "$AGENT_CMD" > "$(agent_cmd_file)"
  (eval "$AGENT_CMD") | grep -v echo > "$(agent_file)"
  agent_env
  ssh-add
}

# Automatically determines which agent to use and starts it if necessary
agent_auto () {
  # If we don't own the agent we should not replace it
  if agent_running && ! grep -q "SSH_AGENT_PID=$SSH_AGENT_PID;" "$(agent_file)" 2>/dev/null; then
    return 0
  fi

  agent_env

  local AGENT_CMD;
  AGENT_CMD=$(agent_which $AGENT)
  if agent_proper; then
    return 0
  fi

  agent_spawn
  agent_proper
}
